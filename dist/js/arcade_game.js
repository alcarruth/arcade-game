// Generated by CoffeeScript 2.4.1
(function() {
  var Enemy, Engine, Entity, Player, Resources, Score_Board, init,
    boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

  Resources = class Resources {
    constructor() {
      this._load = this._load.bind(this);
      this.load = this.load.bind(this);
      this.get = this.get.bind(this);
      this.isReady = this.isReady.bind(this);
      this.onReady = this.onReady.bind(this);
      this.resourceCache = {};
      this.readyCallbacks = [];
    }

    _load(url) {
      var img;
      if (this.resourceCache[url]) {
        return this.resourceCache[url];
      } else {
        this.resourceCache[url] = void 0;
        img = new Image();
        img.src = url;
        return img.onload = () => {
          this.resourceCache[url] = img;
          if (this.isReady()) {
            return this.readyCallbacks.forEach(function(cb) {
              return cb();
            });
          }
        };
      }
    }

    load(urls) {
      if (urls instanceof Array) {
        return urls.forEach(this._load);
      } else {
        return this._load(urls);
      }
    }

    get(url) {
      return this.resourceCache[url];
    }

    isReady() {
      var _, ready, ref, resource;
      ready = true;
      ref = this.resourceCache;
      for (_ in ref) {
        resource = ref[_];
        ready &= resource != null;
      }
      return ready;
    }

    onReady(cb) {
      return this.readyCallbacks.push(cb);
    }

  };

  Score_Board = class Score_Board {
    constructor(engine1) {
      this.update = this.update.bind(this);
      this.engine = engine1;
      this.score_elt = document.getElementById("score");
      this.lives_elt = document.getElementById("lives");
    }

    update() {
      this.score_elt.innerHTML = `Score: ${this.engine.score}`;
      return this.lives_elt.innerHTML = `Lives: ${this.engine.lives}`;
    }

  };

  Engine = class Engine {
    constructor() {
      // class Engine methods

      // player getter() and setter() methods
      this.setPlayer = this.setPlayer.bind(this);
      this.getPlayer = this.getPlayer.bind(this);
      // add and get enemies
      this.addEnemy = this.addEnemy.bind(this);
      this.getEnemies = this.getEnemies.bind(this);
      // main loop
      this.main = this.main.bind(this);
      // pause the game
      this.toggle_pause = this.toggle_pause.bind(this);
      // initialize and start the game
      this.init = this.init.bind(this);
      this.stop = this.stop.bind(this);
      this.start = this.start.bind(this);
      // handle player key press
      this.on_keyup = this.on_keyup.bind(this);
      // update the positions of the entities and act accordingly
      this.update = this.update.bind(this);
      // render the game board
      this.render = this.render.bind(this);
      // reset game 
      this.reset = this.reset.bind(this);
      this.numCols = 5;
      this.numRows = 6;
      this.initLives = 10;
      this.colWidth = 101;
      this.rowHeight = 83;
      this.score_board = new Score_Board(this);
      this.lastTime = null;
      this.enemies = [];
      this.player = null;
      this.paused = false;
      this.rowImages = [
        'images/water-block.png', // Top row is water
        'images/stone-block.png', // Row 1 of 3 of stone
        'images/stone-block.png', // Row 2 of 3 of stone
        'images/stone-block.png', // Row 3 of 3 of stone
        'images/grass-block.png', // Row 1 of 2 of grass
        'images/grass-block.png' // Row 2 of 2 of grass
      ];
      this.resources = new Resources();
      this.resources.onReady(this.reset);
      this.resources.load(['images/stone-block.png', 'images/water-block.png', 'images/grass-block.png', 'images/enemy-bug.png', 'images/char-boy.png']);
      this.canvas = document.createElement('canvas');
      this.canvas.width = this.numCols * this.colWidth;
      this.canvas.height = this.numRows * this.rowHeight + 100;
      this.context = this.canvas.getContext('2d');
      document.body.appendChild(this.canvas);
      document.addEventListener('keyup', this.on_keyup);
    }

    setPlayer(p) {
      return this.player = p;
    }

    getPlayer() {
      return this.player;
    }

    addEnemy(e) {
      return this.enemies.push(e);
    }

    getEnemies() {
      return this.enemies;
    }

    main() {
      var dt, now;
      now = Date.now();
      dt = (now - this.lastTime) / 1000.0;
      this.update(dt);
      this.render();
      if (!this.paused && this.lives > 0) {
        this.lastTime = now;
        return window.requestAnimationFrame(this.main);
      }
    }

    toggle_pause() {
      if (this.paused) {
        return this.start();
      } else {
        return this.stop();
      }
    }

    init() {
      this.paused = true;
      return this.reset();
    }

    stop() {
      return this.paused = true;
    }

    start() {
      if (this.lives < 1) {
        this.reset();
      }
      this.lastTime = Date.now();
      this.paused = false;
      return this.main();
    }

    on_keyup(e) {
      return this.player.handleInput({
        37: 'left',
        38: 'up',
        39: 'right',
        40: 'down'
      }[e.keyCode]);
    }

    update(dt) {
      var enemy, i, j, len, len1, ref, ref1;
      ref = this.enemies;
      // update enemies
      for (i = 0, len = ref.length; i < len; i++) {
        enemy = ref[i];
        enemy.update(dt);
      }
      
      // update player
      this.player.update();
      ref1 = this.enemies;
      // check for collisions
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        enemy = ref1[j];
        if (enemy.collision(this.player)) {
          this.lives--;
          this.score_board.update();
          if (this.lives > 0) {
            this.player.reset();
          }
        }
      }
      // check for success
      if (this.player.y < 0) {
        this.score++;
        this.score_board.update();
        return this.player.reset();
      }
    }

    render() {
      var col, enemy, i, img, j, k, len, ref, ref1, ref2, row;
// render the background
      for (row = i = 0, ref = this.numRows; (0 <= ref ? i < ref : i > ref); row = 0 <= ref ? ++i : --i) {
        img = this.resources.get(this.rowImages[row]);
        for (col = j = 0, ref1 = this.numCols; (0 <= ref1 ? j < ref1 : j > ref1); col = 0 <= ref1 ? ++j : --j) {
          this.context.drawImage(img, col * this.colWidth, row * this.rowHeight);
        }
      }
      ref2 = this.enemies;
      // render the enemies
      for (k = 0, len = ref2.length; k < len; k++) {
        enemy = ref2[k];
        enemy.render();
      }
      // render the player
      return this.player.render();
    }

    reset() {
      var enemy, i, len, ref;
      this.score = 0;
      this.lives = this.initLives;
      this.score_board.update();
      this.player.reset();
      ref = this.enemies;
      for (i = 0, len = ref.length; i < len; i++) {
        enemy = ref[i];
        enemy.reset();
      }
      this.lastTime = Date.now();
      return this.render();
    }

  };

  Entity = class Entity {
    constructor(engine, init_x, init_y, sprite1) {
      this.reset = this.reset.bind(this);
      this.render = this.render.bind(this);
      this.init_x = init_x;
      this.init_y = init_y;
      this.sprite = sprite1;
      this.numCols = engine.numCols;
      this.numRows = engine.numRows;
      this.colWidth = engine.colWidth;
      this.rowHeight = engine.rowHeight;
      this.context = engine.context;
      this.resources = engine.resources;
      this.reset();
    }

    reset() {
      this.x = this.init_x;
      return this.y = this.init_y;
    }

    render() {
      var img;
      img = this.resources.get(this.sprite);
      return this.context.drawImage(img, this.x, this.y);
    }

  };

  Enemy = class Enemy extends Entity {
    constructor(engine, row, speed, sprite) {
      var offset, x_init, y_init;
      // some of the images are taller than the rows
      // so I tweaked it here.
      offset = -20;
      x_init = -engine.colWidth;
      y_init = (engine.numRows - row - 1) * engine.rowHeight + offset;
      super(engine, x_init, y_init, sprite);
      this.collision = this.collision.bind(this);
      this.update = this.update.bind(this);
      // speed is 1 (min) .. 10 (max).
      this.speed = speed;
    }

    collision(entity) {
      var collision, x_max, x_min, y_max, y_min;
      boundMethodCheck(this, Enemy);
      x_min = Math.floor(this.x / this.colWidth) * this.colWidth;
      x_max = x_min + 2 * this.colWidth;
      y_min = Math.floor(this.y / this.rowHeight) * this.rowHeight;
      y_max = y_min + this.rowHeight;
      collision = entity.x >= x_min && entity.x < x_max && entity.y >= y_min && entity.y < y_max;
      return collision;
    }

    update(dt) {
      var dx;
      boundMethodCheck(this, Enemy);
      // reset if at right edge
      if (this.x >= this.numCols * this.colWidth) {
        return this.reset();
      } else {
        // otherwise increase x position appropriately
        dx = this.speed / 5 * dt * this.colWidth;
        return this.x = this.x + dx;
      }
    }

  };

  Player = class Player extends Entity {
    constructor(engine, sprite) {
      var col, offset, row, x_init, y_init;
      // start on the bottom row
      row = 1;
      // in the middle column
      col = (engine.numCols + 1) / 2;
      // some of the images are taller than the rows
      // so I tweaked it here.
      offset = -10;
      x_init = (col - 1) * engine.colWidth;
      y_init = (engine.numRows - row) * engine.rowHeight + offset;
      super(engine, x_init, y_init, sprite);
      this.update = this.update.bind(this);
      this.handleInput = this.handleInput.bind(this);
      this.move_left = this.move_left.bind(this);
      this.move_right = this.move_right.bind(this);
      this.move_up = this.move_up.bind(this);
      this.move_down = this.move_down.bind(this);
    }

    update(dt) {
      boundMethodCheck(this, Player);
      return dt = dt;
    }

    handleInput(direction) {
      var move;
      boundMethodCheck(this, Player);
      console.log(`direction: ${direction}`);
      move = {
        left: this.move_left,
        right: this.move_right,
        up: this.move_up,
        down: this.move_down
      }[direction];
      if (move != null) {
        return move();
      }
    }

    move_left() {
      boundMethodCheck(this, Player);
      if (this.x > 0) {
        return this.x -= this.colWidth;
      }
    }

    move_right() {
      boundMethodCheck(this, Player);
      if (this.x < (this.numCols - 1) * this.colWidth) {
        return this.x += this.colWidth;
      }
    }

    move_up() {
      boundMethodCheck(this, Player);
      if (this.y >= this.rowHeight) {
        return this.y -= this.rowHeight;
      } else if (this.y > 0) {
        return this.y -= this.rowHeight;
      } else {
        return this.reset();
      }
    }

    move_down() {
      boundMethodCheck(this, Player);
      // why minus 2 ? 
      if (this.y < (this.numRows - 2) * this.rowHeight) {
        return this.y += this.rowHeight;
      }
    }

  };

  init = function() {
    var engine;
    engine = new Engine();
    /*  Create a new Player object */
    engine.setPlayer(new Player(engine, "images/char-boy.png"));
    /*  Create several Enemy objects */
    engine.addEnemy(new Enemy(engine, 3, 8, 'images/enemy-bug.png'));
    engine.addEnemy(new Enemy(engine, 4, 7, 'images/enemy-bug.png'));
    engine.addEnemy(new Enemy(engine, 2, 5, 'images/enemy-bug.png'));
    return window.app = engine;
  };

  if (document.readyState === 'complete') {
    init();
  } else {
    document.onreadystatechange = function() {
      if (document.readyState === 'complete') {
        return init();
      }
    };
  }

}).call(this);

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=/usr/local/server/git/clones/p3-arcade-game/build/arcade_game.coffee